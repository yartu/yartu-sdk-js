/**
 * @fileoverview gRPC-Web generated client stub for yartu
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.9
// source: project/grpc/service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_grpc_definitions_pb = require('../utils/definitions_pb.cjs')
const proto = {};
proto.yartu = require('./service-pb.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yartu.YProjectClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yartu.YProjectPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.ListProjectRequest,
 *   !proto.yartu.ListProjectResponse>}
 */
const methodDescriptor_YProject_listProject = new grpc.web.MethodDescriptor(
  '/yartu.YProject/listProject',
  grpc.web.MethodType.UNARY,
  proto.yartu.ListProjectRequest,
  proto.yartu.ListProjectResponse,
  /**
   * @param {!proto.yartu.ListProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.ListProjectResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.ListProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.ListProjectResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.ListProjectResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YProjectClient.prototype.listProject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YProject/listProject',
      request,
      metadata || {},
      methodDescriptor_YProject_listProject,
      callback);
};


/**
 * @param {!proto.yartu.ListProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.ListProjectResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YProjectPromiseClient.prototype.listProject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YProject/listProject',
      request,
      metadata || {},
      methodDescriptor_YProject_listProject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.GetProjectRequest,
 *   !proto.yartu.GetProjectResponse>}
 */
const methodDescriptor_YProject_getProject = new grpc.web.MethodDescriptor(
  '/yartu.YProject/getProject',
  grpc.web.MethodType.UNARY,
  proto.yartu.GetProjectRequest,
  proto.yartu.GetProjectResponse,
  /**
   * @param {!proto.yartu.GetProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.GetProjectResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.GetProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.GetProjectResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.GetProjectResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YProjectClient.prototype.getProject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YProject/getProject',
      request,
      metadata || {},
      methodDescriptor_YProject_getProject,
      callback);
};


/**
 * @param {!proto.yartu.GetProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.GetProjectResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YProjectPromiseClient.prototype.getProject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YProject/getProject',
      request,
      metadata || {},
      methodDescriptor_YProject_getProject);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.UpsertProjectRequest,
 *   !proto.yartu.UpsertProjectResponse>}
 */
const methodDescriptor_YProject_upsertProject = new grpc.web.MethodDescriptor(
  '/yartu.YProject/upsertProject',
  grpc.web.MethodType.UNARY,
  proto.yartu.UpsertProjectRequest,
  proto.yartu.UpsertProjectResponse,
  /**
   * @param {!proto.yartu.UpsertProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.UpsertProjectResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.UpsertProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.UpsertProjectResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.UpsertProjectResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YProjectClient.prototype.upsertProject =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YProject/upsertProject',
      request,
      metadata || {},
      methodDescriptor_YProject_upsertProject,
      callback);
};


/**
 * @param {!proto.yartu.UpsertProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.UpsertProjectResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YProjectPromiseClient.prototype.upsertProject =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YProject/upsertProject',
      request,
      metadata || {},
      methodDescriptor_YProject_upsertProject);
};


module.exports = proto.yartu;

