/**
 * @fileoverview gRPC-Web generated client stub for yartu
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.4
// source: conference/grpc/service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_grpc_definitions_pb = require('../utils/definitions_pb.cjs')

var note_grpc_service_pb = require('../Note/service-pb.cjs')
const proto = {};
proto.yartu = require('./service-pb.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yartu.YConferenceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.yartu.YConferencePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.ListConferenceRequest,
 *   !proto.yartu.ListConferenceResponse>}
 */
const methodDescriptor_YConference_listConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/listConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.ListConferenceRequest,
  proto.yartu.ListConferenceResponse,
  /**
   * @param {!proto.yartu.ListConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.ListConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.ListConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.ListConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.ListConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.listConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/listConference',
      request,
      metadata || {},
      methodDescriptor_YConference_listConference,
      callback);
};


/**
 * @param {!proto.yartu.ListConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.ListConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.listConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/listConference',
      request,
      metadata || {},
      methodDescriptor_YConference_listConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.GetConferenceRequest,
 *   !proto.yartu.GetConferenceResponse>}
 */
const methodDescriptor_YConference_getConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/getConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.GetConferenceRequest,
  proto.yartu.GetConferenceResponse,
  /**
   * @param {!proto.yartu.GetConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.GetConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.GetConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.GetConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.GetConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.getConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/getConference',
      request,
      metadata || {},
      methodDescriptor_YConference_getConference,
      callback);
};


/**
 * @param {!proto.yartu.GetConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.GetConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.getConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/getConference',
      request,
      metadata || {},
      methodDescriptor_YConference_getConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.UpsertConferenceRequest,
 *   !proto.yartu.UpsertConferenceResponse>}
 */
const methodDescriptor_YConference_upsertConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/upsertConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.UpsertConferenceRequest,
  proto.yartu.UpsertConferenceResponse,
  /**
   * @param {!proto.yartu.UpsertConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.UpsertConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.UpsertConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.UpsertConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.UpsertConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.upsertConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/upsertConference',
      request,
      metadata || {},
      methodDescriptor_YConference_upsertConference,
      callback);
};


/**
 * @param {!proto.yartu.UpsertConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.UpsertConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.upsertConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/upsertConference',
      request,
      metadata || {},
      methodDescriptor_YConference_upsertConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.DuplicateConferenceRequest,
 *   !proto.yartu.DuplicateConferenceResponse>}
 */
const methodDescriptor_YConference_duplicateConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/duplicateConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.DuplicateConferenceRequest,
  proto.yartu.DuplicateConferenceResponse,
  /**
   * @param {!proto.yartu.DuplicateConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.DuplicateConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.DuplicateConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.DuplicateConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.DuplicateConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.duplicateConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/duplicateConference',
      request,
      metadata || {},
      methodDescriptor_YConference_duplicateConference,
      callback);
};


/**
 * @param {!proto.yartu.DuplicateConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.DuplicateConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.duplicateConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/duplicateConference',
      request,
      metadata || {},
      methodDescriptor_YConference_duplicateConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.UpsertInstantConferenceRequest,
 *   !proto.yartu.UpsertInstantConferenceResponse>}
 */
const methodDescriptor_YConference_upsertInstantConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/upsertInstantConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.UpsertInstantConferenceRequest,
  proto.yartu.UpsertInstantConferenceResponse,
  /**
   * @param {!proto.yartu.UpsertInstantConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.UpsertInstantConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.UpsertInstantConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.UpsertInstantConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.UpsertInstantConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.upsertInstantConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/upsertInstantConference',
      request,
      metadata || {},
      methodDescriptor_YConference_upsertInstantConference,
      callback);
};


/**
 * @param {!proto.yartu.UpsertInstantConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.UpsertInstantConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.upsertInstantConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/upsertInstantConference',
      request,
      metadata || {},
      methodDescriptor_YConference_upsertInstantConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.StartConferenceRequest,
 *   !proto.yartu.StartConferenceResponse>}
 */
const methodDescriptor_YConference_startConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/startConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.StartConferenceRequest,
  proto.yartu.StartConferenceResponse,
  /**
   * @param {!proto.yartu.StartConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.StartConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.StartConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.StartConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.StartConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.startConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/startConference',
      request,
      metadata || {},
      methodDescriptor_YConference_startConference,
      callback);
};


/**
 * @param {!proto.yartu.StartConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.StartConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.startConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/startConference',
      request,
      metadata || {},
      methodDescriptor_YConference_startConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.FinishConferenceRequest,
 *   !proto.yartu.FinishConferenceResponse>}
 */
const methodDescriptor_YConference_finishConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/finishConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.FinishConferenceRequest,
  proto.yartu.FinishConferenceResponse,
  /**
   * @param {!proto.yartu.FinishConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.FinishConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.FinishConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.FinishConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.FinishConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.finishConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/finishConference',
      request,
      metadata || {},
      methodDescriptor_YConference_finishConference,
      callback);
};


/**
 * @param {!proto.yartu.FinishConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.FinishConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.finishConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/finishConference',
      request,
      metadata || {},
      methodDescriptor_YConference_finishConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.ListConferenceRecordsRequest,
 *   !proto.yartu.ListConferenceRecordsResponse>}
 */
const methodDescriptor_YConference_listConferenceRecords = new grpc.web.MethodDescriptor(
  '/yartu.YConference/listConferenceRecords',
  grpc.web.MethodType.UNARY,
  proto.yartu.ListConferenceRecordsRequest,
  proto.yartu.ListConferenceRecordsResponse,
  /**
   * @param {!proto.yartu.ListConferenceRecordsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.ListConferenceRecordsResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.ListConferenceRecordsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.ListConferenceRecordsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.ListConferenceRecordsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.listConferenceRecords =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/listConferenceRecords',
      request,
      metadata || {},
      methodDescriptor_YConference_listConferenceRecords,
      callback);
};


/**
 * @param {!proto.yartu.ListConferenceRecordsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.ListConferenceRecordsResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.listConferenceRecords =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/listConferenceRecords',
      request,
      metadata || {},
      methodDescriptor_YConference_listConferenceRecords);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.DeleteRecordRequest,
 *   !proto.yartu.DeleteRecordResponse>}
 */
const methodDescriptor_YConference_deleteRecord = new grpc.web.MethodDescriptor(
  '/yartu.YConference/deleteRecord',
  grpc.web.MethodType.UNARY,
  proto.yartu.DeleteRecordRequest,
  proto.yartu.DeleteRecordResponse,
  /**
   * @param {!proto.yartu.DeleteRecordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.DeleteRecordResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.DeleteRecordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.DeleteRecordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.DeleteRecordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.deleteRecord =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/deleteRecord',
      request,
      metadata || {},
      methodDescriptor_YConference_deleteRecord,
      callback);
};


/**
 * @param {!proto.yartu.DeleteRecordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.DeleteRecordResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.deleteRecord =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/deleteRecord',
      request,
      metadata || {},
      methodDescriptor_YConference_deleteRecord);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.DeleteConferenceRequest,
 *   !proto.yartu.DeleteConferenceResponse>}
 */
const methodDescriptor_YConference_deleteConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/deleteConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.DeleteConferenceRequest,
  proto.yartu.DeleteConferenceResponse,
  /**
   * @param {!proto.yartu.DeleteConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.DeleteConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.DeleteConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.DeleteConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.DeleteConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.deleteConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/deleteConference',
      request,
      metadata || {},
      methodDescriptor_YConference_deleteConference,
      callback);
};


/**
 * @param {!proto.yartu.DeleteConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.DeleteConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.deleteConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/deleteConference',
      request,
      metadata || {},
      methodDescriptor_YConference_deleteConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.ListSessionParticipantRequest,
 *   !proto.yartu.ListSessionParticipantResponse>}
 */
const methodDescriptor_YConference_listSessionParticipant = new grpc.web.MethodDescriptor(
  '/yartu.YConference/listSessionParticipant',
  grpc.web.MethodType.UNARY,
  proto.yartu.ListSessionParticipantRequest,
  proto.yartu.ListSessionParticipantResponse,
  /**
   * @param {!proto.yartu.ListSessionParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.ListSessionParticipantResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.ListSessionParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.ListSessionParticipantResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.ListSessionParticipantResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.listSessionParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/listSessionParticipant',
      request,
      metadata || {},
      methodDescriptor_YConference_listSessionParticipant,
      callback);
};


/**
 * @param {!proto.yartu.ListSessionParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.ListSessionParticipantResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.listSessionParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/listSessionParticipant',
      request,
      metadata || {},
      methodDescriptor_YConference_listSessionParticipant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.ShareConferenceRequest,
 *   !proto.yartu.ShareConferenceResponse>}
 */
const methodDescriptor_YConference_shareConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/shareConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.ShareConferenceRequest,
  proto.yartu.ShareConferenceResponse,
  /**
   * @param {!proto.yartu.ShareConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.ShareConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.ShareConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.ShareConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.ShareConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.shareConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/shareConference',
      request,
      metadata || {},
      methodDescriptor_YConference_shareConference,
      callback);
};


/**
 * @param {!proto.yartu.ShareConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.ShareConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.shareConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/shareConference',
      request,
      metadata || {},
      methodDescriptor_YConference_shareConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.UnshareConferenceRequest,
 *   !proto.yartu.UnshareConferenceResponse>}
 */
const methodDescriptor_YConference_unshareConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/unshareConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.UnshareConferenceRequest,
  proto.yartu.UnshareConferenceResponse,
  /**
   * @param {!proto.yartu.UnshareConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.UnshareConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.UnshareConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.UnshareConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.UnshareConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.unshareConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/unshareConference',
      request,
      metadata || {},
      methodDescriptor_YConference_unshareConference,
      callback);
};


/**
 * @param {!proto.yartu.UnshareConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.UnshareConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.unshareConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/unshareConference',
      request,
      metadata || {},
      methodDescriptor_YConference_unshareConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.UpsertSessionParticipantRequest,
 *   !proto.yartu.UpsertSessionParticipantResponse>}
 */
const methodDescriptor_YConference_upsertSessionParticipant = new grpc.web.MethodDescriptor(
  '/yartu.YConference/upsertSessionParticipant',
  grpc.web.MethodType.UNARY,
  proto.yartu.UpsertSessionParticipantRequest,
  proto.yartu.UpsertSessionParticipantResponse,
  /**
   * @param {!proto.yartu.UpsertSessionParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.UpsertSessionParticipantResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.UpsertSessionParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.UpsertSessionParticipantResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.UpsertSessionParticipantResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.upsertSessionParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/upsertSessionParticipant',
      request,
      metadata || {},
      methodDescriptor_YConference_upsertSessionParticipant,
      callback);
};


/**
 * @param {!proto.yartu.UpsertSessionParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.UpsertSessionParticipantResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.upsertSessionParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/upsertSessionParticipant',
      request,
      metadata || {},
      methodDescriptor_YConference_upsertSessionParticipant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.CheckPublicConferenceRequest,
 *   !proto.yartu.CheckPublicConferenceResponse>}
 */
const methodDescriptor_YConference_checkPublicConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/checkPublicConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.CheckPublicConferenceRequest,
  proto.yartu.CheckPublicConferenceResponse,
  /**
   * @param {!proto.yartu.CheckPublicConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.CheckPublicConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.CheckPublicConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.CheckPublicConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.CheckPublicConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.checkPublicConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/checkPublicConference',
      request,
      metadata || {},
      methodDescriptor_YConference_checkPublicConference,
      callback);
};


/**
 * @param {!proto.yartu.CheckPublicConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.CheckPublicConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.checkPublicConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/checkPublicConference',
      request,
      metadata || {},
      methodDescriptor_YConference_checkPublicConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.StartPublicConferenceRequest,
 *   !proto.yartu.StartPublicConferenceResponse>}
 */
const methodDescriptor_YConference_startPublicConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/startPublicConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.StartPublicConferenceRequest,
  proto.yartu.StartPublicConferenceResponse,
  /**
   * @param {!proto.yartu.StartPublicConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.StartPublicConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.StartPublicConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.StartPublicConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.StartPublicConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.startPublicConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/startPublicConference',
      request,
      metadata || {},
      methodDescriptor_YConference_startPublicConference,
      callback);
};


/**
 * @param {!proto.yartu.StartPublicConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.StartPublicConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.startPublicConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/startPublicConference',
      request,
      metadata || {},
      methodDescriptor_YConference_startPublicConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.GetPublicConferenceRequest,
 *   !proto.yartu.GetPublicConferenceResponse>}
 */
const methodDescriptor_YConference_getPublicConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/getPublicConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.GetPublicConferenceRequest,
  proto.yartu.GetPublicConferenceResponse,
  /**
   * @param {!proto.yartu.GetPublicConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.GetPublicConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.GetPublicConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.GetPublicConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.GetPublicConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.getPublicConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/getPublicConference',
      request,
      metadata || {},
      methodDescriptor_YConference_getPublicConference,
      callback);
};


/**
 * @param {!proto.yartu.GetPublicConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.GetPublicConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.getPublicConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/getPublicConference',
      request,
      metadata || {},
      methodDescriptor_YConference_getPublicConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.LockConferenceRequest,
 *   !proto.yartu.LockConferenceResponse>}
 */
const methodDescriptor_YConference_lockConference = new grpc.web.MethodDescriptor(
  '/yartu.YConference/lockConference',
  grpc.web.MethodType.UNARY,
  proto.yartu.LockConferenceRequest,
  proto.yartu.LockConferenceResponse,
  /**
   * @param {!proto.yartu.LockConferenceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.LockConferenceResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.LockConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.LockConferenceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.LockConferenceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.lockConference =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/lockConference',
      request,
      metadata || {},
      methodDescriptor_YConference_lockConference,
      callback);
};


/**
 * @param {!proto.yartu.LockConferenceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.LockConferenceResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.lockConference =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/lockConference',
      request,
      metadata || {},
      methodDescriptor_YConference_lockConference);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.CallYartuUserRequest,
 *   !proto.yartu.CallYartuUserResponse>}
 */
const methodDescriptor_YConference_callYartuUser = new grpc.web.MethodDescriptor(
  '/yartu.YConference/callYartuUser',
  grpc.web.MethodType.UNARY,
  proto.yartu.CallYartuUserRequest,
  proto.yartu.CallYartuUserResponse,
  /**
   * @param {!proto.yartu.CallYartuUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.CallYartuUserResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.CallYartuUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.CallYartuUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.CallYartuUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.callYartuUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/callYartuUser',
      request,
      metadata || {},
      methodDescriptor_YConference_callYartuUser,
      callback);
};


/**
 * @param {!proto.yartu.CallYartuUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.CallYartuUserResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.callYartuUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/callYartuUser',
      request,
      metadata || {},
      methodDescriptor_YConference_callYartuUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.TakeCallRequest,
 *   !proto.yartu.TakeCallResponse>}
 */
const methodDescriptor_YConference_takeCall = new grpc.web.MethodDescriptor(
  '/yartu.YConference/takeCall',
  grpc.web.MethodType.UNARY,
  proto.yartu.TakeCallRequest,
  proto.yartu.TakeCallResponse,
  /**
   * @param {!proto.yartu.TakeCallRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.TakeCallResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.TakeCallRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.TakeCallResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.TakeCallResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.takeCall =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/takeCall',
      request,
      metadata || {},
      methodDescriptor_YConference_takeCall,
      callback);
};


/**
 * @param {!proto.yartu.TakeCallRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.TakeCallResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.takeCall =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/takeCall',
      request,
      metadata || {},
      methodDescriptor_YConference_takeCall);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.CancelCallRequest,
 *   !proto.yartu.CancelCallResponse>}
 */
const methodDescriptor_YConference_cancelCall = new grpc.web.MethodDescriptor(
  '/yartu.YConference/cancelCall',
  grpc.web.MethodType.UNARY,
  proto.yartu.CancelCallRequest,
  proto.yartu.CancelCallResponse,
  /**
   * @param {!proto.yartu.CancelCallRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.CancelCallResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.CancelCallRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.CancelCallResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.CancelCallResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.cancelCall =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/cancelCall',
      request,
      metadata || {},
      methodDescriptor_YConference_cancelCall,
      callback);
};


/**
 * @param {!proto.yartu.CancelCallRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.CancelCallResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.cancelCall =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/cancelCall',
      request,
      metadata || {},
      methodDescriptor_YConference_cancelCall);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.yartu.CopyConferenceRecordToDriveRequest,
 *   !proto.yartu.CopyConferenceRecordToDriveResponse>}
 */
const methodDescriptor_YConference_copyConferenceRecordToDrive = new grpc.web.MethodDescriptor(
  '/yartu.YConference/copyConferenceRecordToDrive',
  grpc.web.MethodType.UNARY,
  proto.yartu.CopyConferenceRecordToDriveRequest,
  proto.yartu.CopyConferenceRecordToDriveResponse,
  /**
   * @param {!proto.yartu.CopyConferenceRecordToDriveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.yartu.CopyConferenceRecordToDriveResponse.deserializeBinary
);


/**
 * @param {!proto.yartu.CopyConferenceRecordToDriveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.yartu.CopyConferenceRecordToDriveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.yartu.CopyConferenceRecordToDriveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.yartu.YConferenceClient.prototype.copyConferenceRecordToDrive =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/yartu.YConference/copyConferenceRecordToDrive',
      request,
      metadata || {},
      methodDescriptor_YConference_copyConferenceRecordToDrive,
      callback);
};


/**
 * @param {!proto.yartu.CopyConferenceRecordToDriveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.yartu.CopyConferenceRecordToDriveResponse>}
 *     Promise that resolves to the response
 */
proto.yartu.YConferencePromiseClient.prototype.copyConferenceRecordToDrive =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/yartu.YConference/copyConferenceRecordToDrive',
      request,
      metadata || {},
      methodDescriptor_YConference_copyConferenceRecordToDrive);
};


module.exports = proto.yartu;

